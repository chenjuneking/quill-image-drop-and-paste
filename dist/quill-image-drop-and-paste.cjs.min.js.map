{"version":3,"file":"quill-image-drop-and-paste.cjs.min.js","sources":["../src/utils.ts","../src/ImageData.ts","../src/ImageDropAndPaste.ts"],"sourcesContent":["export default {\r\n  /* generate a filename\r\n   */\r\n  generateFilename(): string {\r\n    return btoa(String(Math.random() * 1e6) + String(+new Date())).replace(\r\n      '=',\r\n      ''\r\n    )\r\n  },\r\n  /* detect the giving url is a image\r\n   */\r\n  urlIsImage(url: string, abortTimeout = 3000): Promise<boolean> {\r\n    if (!this.validURL(url)) {\r\n      return Promise.reject(false)\r\n    }\r\n    if (/\\.(jpeg|jpg|gif|png|webp|tiff|bmp)$/.test(url)) {\r\n      return Promise.resolve(true)\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      let timer: any = undefined\r\n      const img = new Image()\r\n      img.onerror = img.onabort = () => {\r\n        clearTimeout(timer)\r\n        reject(false)\r\n      }\r\n      img.onload = () => {\r\n        clearTimeout(timer)\r\n        resolve(true)\r\n      }\r\n      timer = setTimeout(() => {\r\n        img.src = '//!/an/invalid.jpg'\r\n        reject(false)\r\n      }, abortTimeout)\r\n      img.src = url\r\n    })\r\n  },\r\n  urlIsImageDataUrl(url: string): boolean {\r\n    return /^data:image\\/\\w+;base64,/.test(url)\r\n  },\r\n  /* check string is a valid url\r\n   */\r\n  validURL(str: string): boolean {\r\n    try {\r\n      return Boolean(new URL(str))\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  },\r\n  /* check the giving string is a html text\r\n   */\r\n  isRichText(clipboardDataItems: DataTransferItemList): boolean {\r\n    let hasHtml = false\r\n    let hasImage = false\r\n    Array.prototype.forEach.call(clipboardDataItems, (item) => {\r\n      if (item.kind === 'string' && item.type.match(/^text\\/html$/i)) {\r\n        hasHtml = true\r\n      }\r\n      if (item.kind === 'file' && item.type.match(/^image\\/\\w+$/i)) {\r\n        hasImage = true\r\n      }\r\n    })\r\n    return hasHtml && !hasImage\r\n  },\r\n  /* resolve dataUrl to base64 string\r\n   */\r\n  resolveDataUrl(dataUrl: string | ArrayBuffer, type: string): string {\r\n    let str = ''\r\n    if (typeof dataUrl === 'string') {\r\n      str = dataUrl\r\n    } else if (dataUrl instanceof ArrayBuffer) {\r\n      str = this.arrayBufferToBase64Url(dataUrl, type)\r\n    }\r\n    return str\r\n  },\r\n  /* generate array buffer from binary string\r\n   */\r\n  binaryStringToArrayBuffer(binary: string): ArrayBuffer {\r\n    const len = binary.length\r\n    const buffer = new ArrayBuffer(len)\r\n    const arr = new Uint8Array(buffer)\r\n    let i = -1\r\n    while (++i < len) arr[i] = binary.charCodeAt(i)\r\n    return buffer\r\n  },\r\n  /* generate base64 string from array buffer\r\n   */\r\n  arrayBufferToBase64Url(arrayBuffer: ArrayBuffer, type: string): string {\r\n    return (\r\n      `data:${type};base64,` +\r\n      btoa(\r\n        new Uint8Array(arrayBuffer).reduce(\r\n          (acc: string, byte: number) => acc + String.fromCharCode(byte),\r\n          ''\r\n        )\r\n      )\r\n    )\r\n  },\r\n  /* copy text - make text store in the clipboard\r\n   */\r\n  copyText(content: string, target = document.body): boolean {\r\n    const element = document.createElement('textarea')\r\n    const previouslyFocusedElement = document.activeElement\r\n    element.value = content\r\n    // Prevent keyboard from showing on mobile\r\n    element.setAttribute('readonly', '')\r\n    element.style.position = 'absolute'\r\n    element.style.left = '-9999px'\r\n    element.style.fontSize = '12pt' // Prevent zooming on iOS\r\n    const selection = document.getSelection()\r\n    let originalRange: boolean | Range = false\r\n    if (selection && selection.rangeCount > 0) {\r\n      originalRange = selection.getRangeAt(0)\r\n    }\r\n    target.append(element)\r\n    element.select()\r\n    // Explicit selection workaround for iOS\r\n    element.selectionStart = 0\r\n    element.selectionEnd = content.length\r\n    let isSuccess = false\r\n    try {\r\n      isSuccess = document.execCommand('copy')\r\n      // eslint-disable-next-line no-empty\r\n    } catch {}\r\n    element.remove()\r\n    if (selection && originalRange) {\r\n      selection.removeAllRanges()\r\n      selection.addRange(originalRange)\r\n    }\r\n    // Get the focus back on the previously focused element, if any\r\n    if (previouslyFocusedElement) {\r\n      ;(previouslyFocusedElement as HTMLElement).focus()\r\n    }\r\n    return isSuccess\r\n  },\r\n  /* check the type of specify target\r\n   */\r\n  isType(target: any, type: string): boolean {\r\n    return Object.prototype.toString.call(target) === `[object ${type}]`\r\n  },\r\n}\r\n","import utils from './utils'\r\nimport { IImageDataMinifyOption } from './index.d'\r\n\r\nabstract class QuillImageData {\r\n  public dataUrl: string | ArrayBuffer\r\n  public type: string\r\n  public name: string\r\n  public constructor(\r\n    dataUrl: string | ArrayBuffer,\r\n    type: string,\r\n    name?: string\r\n  ) {\r\n    this.dataUrl = dataUrl\r\n    this.type = type\r\n    this.name = name || ''\r\n  }\r\n  public abstract minify(option: IImageDataMinifyOption)\r\n  public abstract toFile(filename?: string)\r\n  public abstract toBlob()\r\n}\r\n\r\nclass ImageData extends QuillImageData {\r\n  dataUrl: string | ArrayBuffer\r\n  type: string\r\n  name: string\r\n\r\n  constructor(dataUrl: string | ArrayBuffer, type: string, name?: string) {\r\n    super(dataUrl, type, name)\r\n    this.dataUrl = dataUrl\r\n    this.type = type\r\n    this.name = name || `${utils.generateFilename()}.${this.getSuffix()}`\r\n  }\r\n\r\n  /* minify the image\r\n   */\r\n  public minify(\r\n    option: IImageDataMinifyOption\r\n  ): Promise<ImageData | { message: string }> {\r\n    return new Promise((resolve, reject) => {\r\n      const maxWidth = option.maxWidth || 800\r\n      const maxHeight = option.maxHeight || 800\r\n      const quality = option.quality || 0.8\r\n      if (!this.dataUrl) {\r\n        return reject({\r\n          message:\r\n            '[error] QuillImageDropAndPaste: Fail to minify the image, dataUrl should not be empty.',\r\n        })\r\n      }\r\n      const image = new Image()\r\n      image.onload = () => {\r\n        const width = image.width\r\n        const height = image.height\r\n        if (width > height) {\r\n          if (width > maxWidth) {\r\n            image.height = (height * maxWidth) / width\r\n            image.width = maxWidth\r\n          }\r\n        } else {\r\n          if (height > maxHeight) {\r\n            image.width = (width * maxHeight) / height\r\n            image.height = maxHeight\r\n          }\r\n        }\r\n        const canvas = document.createElement('canvas')\r\n        canvas.width = image.width\r\n        canvas.height = image.height\r\n        const ctx = canvas.getContext('2d')\r\n        if (ctx) {\r\n          ctx.drawImage(image, 0, 0, image.width, image.height)\r\n          const canvasType = this.type || 'image/png'\r\n          const canvasDataUrl = canvas.toDataURL(canvasType, quality)\r\n          resolve(new ImageData(canvasDataUrl, canvasType, this.name))\r\n        } else {\r\n          reject({\r\n            message:\r\n              '[error] QuillImageDropAndPaste: Fail to minify the image, create canvas context failure.',\r\n          })\r\n        }\r\n      }\r\n      image.src = utils.resolveDataUrl(this.dataUrl, this.type)\r\n    })\r\n  }\r\n\r\n  /* convert blob to file\r\n   */\r\n  public toFile(filename?: string): File | null {\r\n    filename = filename || this.name\r\n    if (!window.File) {\r\n      console.error(\r\n        '[error] QuillImageDropAndPaste: Your browser didnot support File API.'\r\n      )\r\n      return null\r\n    }\r\n    return new File([this.toBlob()], filename, { type: this.type })\r\n  }\r\n\r\n  /* convert dataURL to blob\r\n   */\r\n  public toBlob(): Blob {\r\n    const base64 = utils\r\n      .resolveDataUrl(this.dataUrl, this.type)\r\n      .replace(/^[^,]+,/, '')\r\n    const buff = utils.binaryStringToArrayBuffer(atob(base64))\r\n    return this.createBlob([buff], { type: this.type })\r\n  }\r\n\r\n  /* create blob\r\n   */\r\n  private createBlob(\r\n    parts: ArrayBuffer[],\r\n    properties: string | { type?: string } | undefined\r\n  ): Blob {\r\n    if (!properties) properties = {}\r\n    if (typeof properties === 'string') properties = { type: properties }\r\n    try {\r\n      return new Blob(parts, properties)\r\n    } catch (e: any) {\r\n      if (e.name !== 'TypeError') throw e\r\n      const Builder =\r\n        'BlobBuilder' in window\r\n          ? (window as any).BlobBuilder\r\n          : 'MSBlobBuilder' in window\r\n          ? (window as any).MSBlobBuilder\r\n          : 'MozBlobBuilder' in window\r\n          ? (window as any).MozBlobBuilder\r\n          : (window as any).WebKitBlobBuilder\r\n      const builder = new Builder()\r\n      for (let i = 0; i < parts.length; i++) builder.append(parts[i])\r\n      return builder.getBlob(properties.type) as Blob\r\n    }\r\n  }\r\n\r\n  private getSuffix(): string {\r\n    const matched = this.type.match(/^image\\/(\\w+)$/)\r\n    const suffix = matched ? matched[1] : 'png'\r\n    return suffix\r\n  }\r\n}\r\n\r\nexport default ImageData\r\n","import utils from './utils'\r\nimport Quill from 'quill'\r\nimport ImageData from './ImageData'\r\ninterface IImageDropAndPasteOption {\r\n  autoConvert?: boolean\r\n  enableNativeUploader?: boolean\r\n  handler?: (\r\n    dataUrl: string | ArrayBuffer,\r\n    type?: string,\r\n    imageData?: ImageData\r\n  ) => void\r\n}\r\n\r\nabstract class QuillImageDropAndPaste {\r\n  static ImageData\r\n  public quill\r\n  public option: IImageDropAndPasteOption\r\n  public constructor(quill: Quill, option: IImageDropAndPasteOption) {\r\n    this.quill = quill\r\n    this.option = option\r\n  }\r\n  protected abstract handleDrop(e: DragEvent)\r\n  protected abstract handlePaste(e: ClipboardEvent)\r\n  protected abstract readFiles(\r\n    files: DataTransferItemList | FileList,\r\n    callback: (dataUrl: string | ArrayBuffer, type?: string) => void,\r\n    e: ClipboardEvent | DragEvent\r\n  )\r\n  protected abstract handleDataTransfer(\r\n    file: DataTransferItem,\r\n    callback: (dataUrl: string | ArrayBuffer, type?: string) => void,\r\n    e: ClipboardEvent | DragEvent\r\n  )\r\n  protected abstract handleDroppedFile(\r\n    file: File,\r\n    callback: (dataUrl: string | ArrayBuffer, type?: string) => void,\r\n    e: ClipboardEvent | DragEvent\r\n  )\r\n  protected abstract insert(content: string, type: string)\r\n  protected abstract getIndex()\r\n}\r\n\r\nclass ImageDropAndPaste extends QuillImageDropAndPaste {\r\n  static ImageData = ImageData\r\n  quill: Quill\r\n  option: IImageDropAndPasteOption\r\n\r\n  constructor(quill: Quill, option: IImageDropAndPasteOption) {\r\n    super(quill, option)\r\n    if (typeof option.autoConvert !== 'boolean') option.autoConvert = true\r\n    if (option.enableNativeUploader !== true) {\r\n      // @ts-ignore\r\n      quill.uploader.options.handler = () => {}\r\n    }\r\n    this.quill = quill\r\n    this.option = option\r\n    this.handleDrop = this.handleDrop.bind(this)\r\n    this.handlePaste = this.handlePaste.bind(this)\r\n    this.insert = this.insert.bind(this)\r\n    this.quill.root.addEventListener('drop', this.handleDrop, false)\r\n    this.quill.root.addEventListener('paste', this.handlePaste, false)\r\n  }\r\n\r\n  /* handle image drop event\r\n   */\r\n  handleDrop(e: DragEvent): void {\r\n    if (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length) {\r\n      e.preventDefault()\r\n      if (document.caretRangeFromPoint) {\r\n        const selection = document.getSelection()\r\n        const range = document.caretRangeFromPoint(e.clientX, e.clientY)\r\n        if (selection && range) {\r\n          selection.setBaseAndExtent(\r\n            range.startContainer,\r\n            range.startOffset,\r\n            range.startContainer,\r\n            range.startOffset\r\n          )\r\n        }\r\n      }\r\n      this.readFiles(\r\n        e.dataTransfer.files,\r\n        (dataUrl: string | ArrayBuffer, type = 'image/png', name?: string) => {\r\n          if (typeof this.option.handler === 'function') {\r\n            this.option.handler.call(\r\n              this,\r\n              dataUrl,\r\n              type,\r\n              new ImageData(dataUrl, type, name)\r\n            )\r\n          } else {\r\n            this.insert.call(this, utils.resolveDataUrl(dataUrl, type), type)\r\n          }\r\n        },\r\n        e\r\n      )\r\n    }\r\n  }\r\n\r\n  /* handle image paste event\r\n   */\r\n  handlePaste(e: ClipboardEvent): void {\r\n    if (\r\n      e.clipboardData &&\r\n      e.clipboardData.items &&\r\n      e.clipboardData.items.length\r\n    ) {\r\n      if (utils.isRichText(e.clipboardData.items)) return\r\n      this.readFiles(\r\n        e.clipboardData.items,\r\n        (dataUrl: string | ArrayBuffer, type = 'image/png') => {\r\n          if (typeof this.option.handler === 'function') {\r\n            this.option.handler.call(\r\n              this,\r\n              dataUrl,\r\n              type,\r\n              new ImageData(dataUrl, type)\r\n            )\r\n          } else {\r\n            this.insert(utils.resolveDataUrl(dataUrl, type), 'image')\r\n          }\r\n        },\r\n        e\r\n      )\r\n    }\r\n  }\r\n\r\n  /* read the files\r\n   */\r\n  readFiles(\r\n    files: DataTransferItemList | FileList,\r\n    callback: (\r\n      dataUrl: string | ArrayBuffer,\r\n      type: string,\r\n      name?: string\r\n    ) => void,\r\n    e: ClipboardEvent | DragEvent\r\n  ): void {\r\n    Array.prototype.forEach.call(files, (file: DataTransferItem | File) => {\r\n      if (utils.isType(file, 'DataTransferItem')) {\r\n        this.handleDataTransfer(file as DataTransferItem, callback, e)\r\n      } else if (file instanceof File) {\r\n        this.handleDroppedFile(file, callback, e)\r\n      }\r\n    })\r\n  }\r\n\r\n  /* handle the pasted data\r\n   */\r\n  handleDataTransfer(\r\n    file: DataTransferItem,\r\n    callback: (\r\n      dataUrl: string | ArrayBuffer,\r\n      type: string,\r\n      name?: string\r\n    ) => void,\r\n    e: ClipboardEvent | DragEvent\r\n  ): void {\r\n    const that = this\r\n    const { type } = file\r\n    if (type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp)/i)) {\r\n      e.preventDefault()\r\n      const reader = new FileReader()\r\n      reader.onload = (e: ProgressEvent<FileReader>) => {\r\n        if (e.target && e.target.result) {\r\n          callback(e.target.result, type)\r\n        }\r\n      }\r\n      const blob = file.getAsFile ? file.getAsFile() : file\r\n      if (blob instanceof Blob) reader.readAsDataURL(blob)\r\n    } else if (type.match(/^text\\/plain$/i)) {\r\n      file.getAsString((s) => {\r\n        // Don't preventDefault here, because there might be clipboard matchers need to be triggered\r\n        // see https://github.com/chenjuneking/quill-image-drop-and-paste/issues/37\r\n        const i = this.getIndex()\r\n        if (utils.urlIsImageDataUrl(s)) {\r\n          // If the url is a dataUrl, just fire the callback\r\n          const matched = s.match(/^data:(image\\/\\w+);base64,/)\r\n          const t = matched ? matched[1] : 'image/png'\r\n          callback(s, t)\r\n          this.quill.deleteText(i, s.length, 'user')\r\n          this.quill.setSelection(i as any)\r\n        } else {\r\n          if (this.option.autoConvert) {\r\n            utils\r\n              .urlIsImage(s)\r\n              .then(() => {\r\n                // If the url isn't a dataUrl, delete the pasted text and insert the image\r\n                setTimeout(() => {\r\n                  this.quill.deleteText(i, s.length, 'user')\r\n                  that.insert(s, 'image', i)\r\n                })\r\n              })\r\n              .catch(() => {\r\n                // Otherwise, do nothing\r\n              })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /* handle the dropped data\r\n   */\r\n  handleDroppedFile(\r\n    file: File,\r\n    callback: (\r\n      dataUrl: string | ArrayBuffer,\r\n      type: string,\r\n      name?: string\r\n    ) => void,\r\n    e: ClipboardEvent | DragEvent\r\n  ): void {\r\n    const { type, name = '' } = file\r\n    if (type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp)/i)) {\r\n      e.preventDefault()\r\n      const reader = new FileReader()\r\n      reader.onload = (e: ProgressEvent<FileReader>) => {\r\n        if (e.target && e.target.result) {\r\n          callback(e.target.result, type, name)\r\n        }\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n  }\r\n\r\n  /* insert into the editor\r\n   */\r\n  insert(content: string, type: string, index?: number): void {\r\n    index = index === undefined ? this.getIndex() : index\r\n    let _index: any\r\n    if (type.startsWith('image')) {\r\n      _index = index + 1\r\n      this.quill.insertEmbed(index, 'image', content, 'user')\r\n    } else if (type.startsWith('text')) {\r\n      _index = index + content.length\r\n      this.quill.insertText(index, content, 'user')\r\n    }\r\n    setTimeout(() => {\r\n      this.quill.setSelection(_index)\r\n    })\r\n  }\r\n\r\n  getIndex(): number {\r\n    let index: number | undefined = (this.quill.getSelection(true) || {}).index\r\n    if (index === undefined || index < 0) index = this.quill.getLength()\r\n    return index\r\n  }\r\n}\r\n\r\n;(window as any).QuillImageDropAndPaste = ImageDropAndPaste\r\nif ('Quill' in window) {\r\n  ;(window as any).Quill.register(\r\n    'modules/imageDropAndPaste',\r\n    ImageDropAndPaste\r\n  )\r\n}\r\n\r\nexport default ImageDropAndPaste\r\n"],"names":["utils","generateFilename","btoa","String","Math","random","Date","replace","urlIsImage","url","abortTimeout","this","validURL","test","Promise","resolve","reject","timer","img","Image","onerror","onabort","clearTimeout","onload","setTimeout","src","urlIsImageDataUrl","str","Boolean","URL","e","isRichText","clipboardDataItems","hasHtml","hasImage","Array","prototype","forEach","call","item","kind","type","match","resolveDataUrl","dataUrl","ArrayBuffer","arrayBufferToBase64Url","binaryStringToArrayBuffer","binary","len","length","buffer","arr","Uint8Array","i","charCodeAt","arrayBuffer","reduce","acc","byte","fromCharCode","copyText","content","target","document","body","element","createElement","previouslyFocusedElement","activeElement","value","setAttribute","style","position","left","fontSize","selection","getSelection","originalRange","rangeCount","getRangeAt","append","select","selectionStart","selectionEnd","isSuccess","execCommand","_a","remove","removeAllRanges","addRange","focus","isType","Object","toString","QuillImageData","constructor","name","ImageData","super","getSuffix","minify","option","maxWidth","maxHeight","quality","message","image","width","height","canvas","ctx","getContext","drawImage","canvasType","canvasDataUrl","toDataURL","toFile","filename","window","File","toBlob","console","error","base64","buff","atob","createBlob","parts","properties","Blob","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","getBlob","matched","QuillImageDropAndPaste","quill","ImageDropAndPaste","autoConvert","enableNativeUploader","uploader","options","handler","handleDrop","bind","handlePaste","insert","root","addEventListener","dataTransfer","files","preventDefault","caretRangeFromPoint","range","clientX","clientY","setBaseAndExtent","startContainer","startOffset","readFiles","clipboardData","items","callback","file","handleDataTransfer","handleDroppedFile","that","reader","FileReader","result","blob","getAsFile","readAsDataURL","getAsString","s","getIndex","t","deleteText","setSelection","then","catch","index","_index","undefined","startsWith","insertEmbed","insertText","getLength","Quill","register"],"mappings":"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"}